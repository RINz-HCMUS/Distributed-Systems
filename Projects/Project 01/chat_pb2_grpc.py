# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import chat_pb2 as chat__pb2

GRPC_GENERATED_VERSION = '1.65.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.66.0'
SCHEDULED_RELEASE_DATE = 'August 6, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in chat_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class ChatServiceStub(object):
    """=============================
    ChatService definition
    =============================
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterUser = channel.unary_unary(
                '/chat.ChatService/RegisterUser',
                request_serializer=chat__pb2.UserInfo.SerializeToString,
                response_deserializer=chat__pb2.RegisterReply.FromString,
                _registered_method=True)
        self.GetUserStatus = channel.unary_unary(
                '/chat.ChatService/GetUserStatus',
                request_serializer=chat__pb2.UserInfo.SerializeToString,
                response_deserializer=chat__pb2.UserStatusResponse.FromString,
                _registered_method=True)
        self.CreateGroup = channel.unary_unary(
                '/chat.ChatService/CreateGroup',
                request_serializer=chat__pb2.GroupInfo.SerializeToString,
                response_deserializer=chat__pb2.ServerReply.FromString,
                _registered_method=True)
        self.AddToGroup = channel.unary_unary(
                '/chat.ChatService/AddToGroup',
                request_serializer=chat__pb2.AddGroupRequest.SerializeToString,
                response_deserializer=chat__pb2.ServerReply.FromString,
                _registered_method=True)
        self.LeaveGroup = channel.unary_unary(
                '/chat.ChatService/LeaveGroup',
                request_serializer=chat__pb2.AddGroupRequest.SerializeToString,
                response_deserializer=chat__pb2.ServerReply.FromString,
                _registered_method=True)
        self.SendMessage = channel.stream_stream(
                '/chat.ChatService/SendMessage',
                request_serializer=chat__pb2.ChatMessage.SerializeToString,
                response_deserializer=chat__pb2.ChatMessage.FromString,
                _registered_method=True)
        self.GetPrivateHistory = channel.unary_unary(
                '/chat.ChatService/GetPrivateHistory',
                request_serializer=chat__pb2.HistoryRequest.SerializeToString,
                response_deserializer=chat__pb2.HistoryResponse.FromString,
                _registered_method=True)
        self.GetGroupHistory = channel.unary_unary(
                '/chat.ChatService/GetGroupHistory',
                request_serializer=chat__pb2.HistoryRequest.SerializeToString,
                response_deserializer=chat__pb2.HistoryResponse.FromString,
                _registered_method=True)


class ChatServiceServicer(object):
    """=============================
    ChatService definition
    =============================
    """

    def RegisterUser(self, request, context):
        """----- User actions -----
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateGroup(self, request, context):
        """----- Group actions -----
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddToGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LeaveGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request_iterator, context):
        """----- Messaging -----
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPrivateHistory(self, request, context):
        """----- History -----
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGroupHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterUser,
                    request_deserializer=chat__pb2.UserInfo.FromString,
                    response_serializer=chat__pb2.RegisterReply.SerializeToString,
            ),
            'GetUserStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserStatus,
                    request_deserializer=chat__pb2.UserInfo.FromString,
                    response_serializer=chat__pb2.UserStatusResponse.SerializeToString,
            ),
            'CreateGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGroup,
                    request_deserializer=chat__pb2.GroupInfo.FromString,
                    response_serializer=chat__pb2.ServerReply.SerializeToString,
            ),
            'AddToGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.AddToGroup,
                    request_deserializer=chat__pb2.AddGroupRequest.FromString,
                    response_serializer=chat__pb2.ServerReply.SerializeToString,
            ),
            'LeaveGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.LeaveGroup,
                    request_deserializer=chat__pb2.AddGroupRequest.FromString,
                    response_serializer=chat__pb2.ServerReply.SerializeToString,
            ),
            'SendMessage': grpc.stream_stream_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=chat__pb2.ChatMessage.FromString,
                    response_serializer=chat__pb2.ChatMessage.SerializeToString,
            ),
            'GetPrivateHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPrivateHistory,
                    request_deserializer=chat__pb2.HistoryRequest.FromString,
                    response_serializer=chat__pb2.HistoryResponse.SerializeToString,
            ),
            'GetGroupHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGroupHistory,
                    request_deserializer=chat__pb2.HistoryRequest.FromString,
                    response_serializer=chat__pb2.HistoryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chat.ChatService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('chat.ChatService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ChatService(object):
    """=============================
    ChatService definition
    =============================
    """

    @staticmethod
    def RegisterUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/RegisterUser',
            chat__pb2.UserInfo.SerializeToString,
            chat__pb2.RegisterReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/GetUserStatus',
            chat__pb2.UserInfo.SerializeToString,
            chat__pb2.UserStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/CreateGroup',
            chat__pb2.GroupInfo.SerializeToString,
            chat__pb2.ServerReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddToGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/AddToGroup',
            chat__pb2.AddGroupRequest.SerializeToString,
            chat__pb2.ServerReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LeaveGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/LeaveGroup',
            chat__pb2.AddGroupRequest.SerializeToString,
            chat__pb2.ServerReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendMessage(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/chat.ChatService/SendMessage',
            chat__pb2.ChatMessage.SerializeToString,
            chat__pb2.ChatMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPrivateHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/GetPrivateHistory',
            chat__pb2.HistoryRequest.SerializeToString,
            chat__pb2.HistoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetGroupHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/GetGroupHistory',
            chat__pb2.HistoryRequest.SerializeToString,
            chat__pb2.HistoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
